#include <bits/stdc++.h>
#define pb push_back
#define mk make_pair
#define pf push_front
#define ppf pop_front
#define pii pair<int,int>
#define ll long long
#define ld long double
#define pll pair<ll,ll>
#define ulli unsigned long long int
#define vi vector<int>
#define vl vector<ll>
#define vulli vector<ulli>
#define vb vector<bool>
#define vpii vector<pii>
#define vpll vector<pll>
#define mod 1000000007
#define N 200001
#define modu 998244353
#define rep(i,a,b) for(int i=a;i<b;i++)
#define rrep(i,a,b) for(int i=a-1;i>=b;i--)
#define INF 1e18
#define all(a)  (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define ppc __builtin_popcount
#define ppcll __builtin_popcountll
#define endl "\n"
using namespace std;
 
int gcd(int a, int b)
{
    if(b==0)
        return a;
    
    return gcd(b,a%b);
}

//seive
bool prime_num[1000001];
void SOE(vector <int> &v)
{
    int n = 1000000;
    memset(prime_num, true, sizeof(prime_num));
 
    for (int p = 2; p * p <= n; p++)
    {
        if (prime_num[p] == true) 
        {
            for (int i = p * p; i <= n; i += p)
                prime_num[i] = false;
        }
    }
    
    
    for (int p = 2; p <= n; p++)
        if (prime_num[p])
            v.pb(p);
}
 
bool binary_search(vector <int> v,int s, int e,int num)
{
    while(s<=e)
    {
        int mid=(s+(e-s)/2);
        
        if(v[mid]==num)
            return true;
        else
        if(v[mid]>num)
            e=mid-1;
        else
            s=mid+1;
    }
    
    return false;
}
 
ll power(ll x, ll y, ll p)
{
    ll res = 1; 
    x = x % p; 
    while (y > 0) 
    {     
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}
 
ll modInverse(ll n,ll p)
{
    return power(n, p - 2, p);
    
    /*
    ll inv[maxn],finv[maxn];
    inv[1] =inv[0]= 1;
    finv[0]=finv[1]=1;
    for (int i=2; i<maxn; ++i)
        inv[i] = (m - (m/i) * inv[m%i] % m) % m;
        
    for (int i=2;i<maxn;++i){
        finv[i]=(inv[i]%m * finv[i-1]%m)%m;
    }

    */
}
 
ll factorial[200001];
ll nCr(ll n, ll r, ll p)
{
    if (n < r)
        return 0;
    if (r == 0)
        return 1;
 
    return (factorial[n] * (modInverse(factorial[r], p) % p) * (modInverse(factorial[n - r], p) % p))% p;
}

void addEdge(vl G[], int s, int e )
{
    G[s].pb(e);
    G[e].pb(s);
}


void dfs(vl V[], vector <bool> &vis, int curr, int start, int cnt, bool &ans)
{
    vis[curr] = true;

    rep(i,0,V[curr].size())
    {
        if(V[curr][i]==start && cnt==(vis.size()-2))
        {
            ans = true;
            return;
        }
        if(!vis[V[curr][i]])
        {
            dfs(V,vis,V[curr][i],start,cnt+1,ans);
        }
    }
}

void solve()
{
    ll n;
    cin>>n;
    
    map <string,vl> mp1;
    rep(i,0,n)
    {
        string a;
        ll b;
        cin>>a>>b;
        mp1[a].pb(b);
    }
    
    string ans="";
    ll mx = 0;
    for(auto i:mp1)
    {
        vl v(all(i.second));
        sort(all(v));
        
        int m = v.size();
        if(m<3)
        {
            if(mx<(v[0]+v[1]))
            {
               mx = v[0]+v[1];
               ans = i.first;
            }
            else
            if(mx==(v[0]+v[1]))
            {
               mx = v[0]+v[1];
               ans = min(ans,i.first);
            }
        }
        else
        {
            if(mx<(v[m-1]+v[m-2]+v[m-3]))
            {
                mx=(v[m-1]+v[m-2]+v[m-3]);
                ans = i.first;
            }
            else
            if(mx==(v[m-1]+v[m-2]+v[m-3]))
            {
                ans = min(ans,i.first);
            }
        }
    }
    
    cout<<ans<<" "<<mx<<"\n";
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);

    int t;
    t=1;
    cin>>t;

    while(t--)
    {
        solve();
    }

}
